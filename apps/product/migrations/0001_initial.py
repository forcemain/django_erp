# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-31 08:07
from __future__ import unicode_literals

import apps.djangoperm.db.fields
import apps.product.utils
import common.fields
import common.state
from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='组装品的名称', max_length=64, perms={'read': False, 'write': False}, unique=True, verbose_name='名称')),
            ],
            options={
                'verbose_name': '组装品',
                'verbose_name_plural': '组装品',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='AssemblySetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', apps.product.utils.QuantityField(decimal_places=12, help_text='所含指定产品类型的数量', max_digits=24, perms={'read': False, 'write': False}, uom='template_setting.uom', verbose_name='数量')),
                ('assembly', common.fields.ActiveLimitForeignKey(help_text='组装品明细所属的组装品', on_delete=django.db.models.deletion.PROTECT, related_name='assembly_settings', to='product.Assembly', verbose_name='组装品')),
            ],
            options={
                'verbose_name': ('组装品明细',),
                'verbose_name_plural': '组装品明细',
            },
        ),
        migrations.CreateModel(
            name='AssemblyTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='组装品模板的名称', max_length=190, perms={'read': False, 'write': False}, unique=True, verbose_name='名称')),
                ('detail', apps.djangoperm.db.fields.TextField(blank=True, help_text='组装品模板的说明', perms={'read': False, 'write': False}, verbose_name='说明')),
            ],
            options={
                'verbose_name': '组装品模板',
                'verbose_name_plural': '组装品模板',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='AssemblyTemplateSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly_template', common.fields.ActiveLimitForeignKey(help_text='模板明细所属的组装品模板', on_delete=django.db.models.deletion.PROTECT, related_name='assembly_template_settings', to='product.AssemblyTemplate', verbose_name='组装品模板')),
            ],
            options={
                'verbose_name': '组装品模板明细',
                'verbose_name_plural': '组装品模板明细',
            },
        ),
        migrations.CreateModel(
            name='Attribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='产品属性的名称', max_length=190, perms={'read': False, 'write': False}, unique=True, verbose_name='名称')),
                ('value', apps.djangoperm.db.fields.JSONField(help_text='JSON格式保存的属性可选值', json_type='list', perms={'read': False, 'write': False}, verbose_name='值')),
                ('extra_price', apps.djangoperm.db.fields.JSONField(help_text='JSON格式保存的属性可选值溢价', json_type='list', perms={'read': False, 'write': False}, verbose_name='值的溢价')),
            ],
            options={
                'verbose_name': '属性',
                'verbose_name_plural': '属性',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='Barcode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('mode', apps.djangoperm.db.fields.CharField(choices=[('Standard39', '标准39')], help_text='条形码模式', max_length=20, perms={'read': False, 'write': False}, verbose_name='条形码模式')),
                ('code', apps.djangoperm.db.fields.JSONField(help_text='条形码的编码值字典', json_type='dict', perms={'read': False, 'write': False}, verbose_name='条形码编码值')),
                ('have_quiet', apps.djangoperm.db.fields.BooleanField(default=False, help_text='条形码是否还有空白区', perms={'read': False, 'write': False}, verbose_name='是否含有静区')),
                ('is_iso_scale', apps.djangoperm.db.fields.BooleanField(default=False, help_text='条形码是否已被iso标准收录', perms={'read': False, 'write': False}, verbose_name='是否被iso收录')),
                ('check_sum', apps.djangoperm.db.fields.BooleanField(default=False, help_text='条形码是否检查合计', perms={'read': False, 'write': False}, verbose_name='是否检查合计')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='批次的名称', max_length=90, perms={'read': False, 'write': False}, unique=True, verbose_name='名称')),
            ],
            options={
                'verbose_name': '批次',
                'verbose_name_plural': '批次',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('attributes', apps.djangoperm.db.fields.JSONField(default={}, help_text='根据产品模板的属性列表设置的产品属性值字典', json_type='dict', perms={'read': False, 'write': False}, verbose_name='产品属性字典')),
                ('prices', apps.djangoperm.db.fields.JSONField(default={}, help_text='根据产品模版的属性溢价列表设置的产品溢价字典', json_type='dict', perms={'read': False, 'write': False}, verbose_name='产品溢价字典')),
                ('attributes_md5', apps.djangoperm.db.fields.CharField(help_text='产品属性字典json值的md5值', max_length=40, perms={'read': False, 'write': False}, verbose_name='产品属性字典的md5值')),
                ('in_code', apps.djangoperm.db.fields.CharField(blank=True, default='', help_text='产品模板的内部编码', max_length=190, perms={'read': False, 'write': False}, verbose_name='内部编码')),
                ('out_code', apps.djangoperm.db.fields.CharField(blank=True, default='', help_text='产品模板的外部编码', max_length=190, perms={'read': False, 'write': False}, verbose_name='外部编码')),
                ('weight', apps.djangoperm.db.fields.DecimalField(blank=True, decimal_places=12, default=Decimal('0.0'), help_text='产品的重量,单位为kg', max_digits=24, perms={'read': False, 'write': False}, verbose_name='重量')),
                ('volume', apps.djangoperm.db.fields.DecimalField(blank=True, decimal_places=12, default=Decimal('0.0'), help_text='产品的体积,单位为m³', max_digits=24, perms={'read': False, 'write': False}, verbose_name='体积')),
                ('salable', apps.djangoperm.db.fields.BooleanField(default=False, help_text='商品的销售状态,如果为False则不能被销售', perms={'read': False, 'write': False}, verbose_name='销售状态')),
                ('purchasable', apps.djangoperm.db.fields.BooleanField(default=False, help_text='商品的采购状态,如果为False则不能被采购', perms={'read': False, 'write': False}, verbose_name='采购状态')),
                ('rentable', apps.djangoperm.db.fields.BooleanField(default=False, help_text='商品的租借状态,如果为False则不能通过被租借', perms={'read': False, 'write': False}, verbose_name='租借状态')),
            ],
            options={
                'verbose_name': '产品',
                'verbose_name_plural': '产品',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='产品的种类', max_length=90, perms={'read': False, 'write': False}, primary_key=True, serialize=False, verbose_name='种类名称')),
                ('sequence', apps.djangoperm.db.fields.PositiveIntegerField(blank=True, default=0, help_text='产品种类的排序', perms={'read': False, 'write': False}, verbose_name='排序')),
            ],
            options={
                'verbose_name': '产品分类',
                'verbose_name_plural': '产品分类',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='ProductTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='产品模板的名称', max_length=190, perms={'read': False, 'write': False}, unique=True, verbose_name='名称')),
                ('stock_type', apps.djangoperm.db.fields.CharField(choices=[('service', '服务'), ('digital', '数字产品'), ('stock-expiration', '过期仓储'), ('stock-no-expiration', '不过期仓储'), ('consumable', '易耗品')], help_text='产品的库存类型', max_length=20, perms={'read': False, 'write': False}, verbose_name='库存类型')),
                ('sequence', apps.djangoperm.db.fields.PositiveIntegerField(blank=True, default=0, help_text='产品显示的排序', perms={'read': False, 'write': False}, verbose_name='排序')),
                ('detail', apps.djangoperm.db.fields.CharField(blank=True, default='', help_text='产品的提示', max_length=190, perms={'read': False, 'write': False}, verbose_name='提示')),
                ('in_description', apps.djangoperm.db.fields.TextField(blank=True, default='', help_text='产品内部的说明', perms={'read': False, 'write': False}, verbose_name='内部说明')),
                ('out_description', apps.djangoperm.db.fields.TextField(blank=True, default='', help_text='产品的外部说明', perms={'read': False, 'write': False}, verbose_name='外部说明')),
                ('attributes', common.fields.ActiveLimitManyToManyField(help_text='产品模板的默认属性', to='product.Attribute', verbose_name='默认属性')),
                ('category', common.fields.ActiveLimitForeignKey(blank=True, help_text='产品的分类', null=True, on_delete=django.db.models.deletion.PROTECT, to='product.ProductCategory', verbose_name='产品种类')),
            ],
            options={
                'verbose_name': '产品模板',
                'verbose_name_plural': '产品模板',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='UOM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='单位名称', max_length=20, perms={'read': False, 'write': False}, unique=True, verbose_name='名称')),
                ('symbol', apps.djangoperm.db.fields.CharField(help_text='单位符号', max_length=10, perms={'read': False, 'write': False}, unique=True, verbose_name='符号')),
                ('decimal_places', apps.djangoperm.db.fields.PositiveSmallIntegerField(default=3, help_text='数量转为浮点数显示时,数量的小数个数', perms={'read': False, 'write': False}, verbose_name='小数精度')),
                ('round_method', apps.djangoperm.db.fields.CharField(choices=[('ROUND_CEILING', '趋向无穷大取整'), ('ROUND_DOWN', '趋向零取整'), ('ROUND_FLOOR', '趋向负无穷大取整'), ('ROUND_HALF_DOWN', '末位大于五反向零取整,否则趋向零取整'), ('ROUND_HALF_EVEN', '末位大于五反向零取整,小于五趋向零取整,遇五前位为奇数反向零取整'), ('ROUND_HALF_UP', '末位大于等于五反向零取整,否则趋向零取整'), ('ROUND_UP', '反向零取整'), ('ROUND_05UP', '取整位数为零或五时反向零取整,否则趋向零取整')], default='ROUND_CEILING', help_text='根据单位做精度转换时单位的默认舍入方法', max_length=10, perms={'read': False, 'write': False}, verbose_name='舍入方法')),
                ('ratio_type', apps.djangoperm.db.fields.CharField(choices=[('greater', '大于'), ('smaller', '小于'), ('equal', '等于')], default='greater', help_text='单位与主单位的比较方式', max_length=10, perms={'read': False, 'write': False}, verbose_name='比率类型')),
                ('ratio', apps.djangoperm.db.fields.DecimalField(decimal_places=12, help_text='与对应单位类型的标准单位的比值', max_digits=24, perms={'read': False, 'write': False}, verbose_name='比率')),
                ('category', apps.djangoperm.db.fields.CharField(choices=[('m', '米'), ('kg', '千克'), ('s', '秒'), ('A', '安培'), ('K', '开尔文'), ('J', '焦耳'), ('m²', '平方米'), ('m³', '立方米'), ('unit', '个'), ('yuan', '元')], help_text='单位所属的单位类型,仅当单位属于同一类型时,方可互相转换', max_length=5, perms={'read': False, 'write': False}, verbose_name='单位类型')),
            ],
            options={
                'verbose_name': '单位',
                'verbose_name_plural': '单位',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='ValidateAction',
            fields=[
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('symbol', apps.djangoperm.db.fields.CharField(help_text='动作所要执行的验货器的名称', max_length=40, perms={'read': False, 'write': False}, primary_key=True, serialize=False, verbose_name='内部符号')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='某类产品在验货时需要进行的验货动作', max_length=190, perms={'read': False, 'write': False}, unique=True, verbose_name='验货动作名')),
                ('explain', apps.djangoperm.db.fields.TextField(help_text='动作的含义解释', perms={'read': False, 'write': False}, verbose_name='解释')),
                ('uom', common.fields.ActiveLimitForeignKey(help_text='对产品验货时针对的单位', on_delete=django.db.models.deletion.PROTECT, related_name='validate_actions', to='product.UOM', verbose_name='验货单位')),
            ],
            options={
                'verbose_name': '验货动作',
                'verbose_name_plural': '验货动作',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.CreateModel(
            name='Validation',
            fields=[
                ('is_active', apps.djangoperm.db.fields.BooleanField(default=True, help_text='记录的可用状态,False为不可用,True为可用', perms={'read': False, 'write': False}, verbose_name='可用状态')),
                ('is_delete', apps.djangoperm.db.fields.BooleanField(default=False, help_text='记录的删除状态,True删除不可视,False为尚未删除', perms={'read': False, 'write': False}, verbose_name='删除状态')),
                ('create_time', apps.djangoperm.db.fields.DateTimeField(auto_now_add=True, help_text='记录的创建时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='创建时间')),
                ('last_modify_time', apps.djangoperm.db.fields.DateTimeField(auto_now=True, help_text='记录的最后修改时间,UTC时间', perms={'read': False, 'write': False}, verbose_name='最后修改时间')),
                ('name', apps.djangoperm.db.fields.CharField(help_text='某类产品在验货时需要进行的验货动作配置', max_length=190, perms={'read': False, 'write': False}, primary_key=True, serialize=False, verbose_name='验货配置名')),
                ('actions', common.fields.ActiveLimitManyToManyField(help_text='对某产品所需执行的所有验货动作', related_name='validations', to='product.ValidateAction', verbose_name='验货动作')),
            ],
            options={
                'verbose_name': '产品验货配置',
                'verbose_name_plural': '产品验货配置',
            },
            bases=(models.Model, common.state.StateMachine),
        ),
        migrations.AddField(
            model_name='producttemplate',
            name='uom',
            field=common.fields.ActiveLimitForeignKey(help_text='产品的默认计量单位', on_delete=django.db.models.deletion.PROTECT, to='product.UOM', verbose_name='单位'),
        ),
        migrations.AddField(
            model_name='producttemplate',
            name='validation',
            field=common.fields.ActiveLimitForeignKey(help_text='产品验货时执行的验证器', null=True, on_delete=django.db.models.deletion.PROTECT, to='product.Validation', verbose_name='产品验证器'),
        ),
        migrations.AddField(
            model_name='product',
            name='template',
            field=common.fields.ActiveLimitForeignKey(help_text='产品的模板', on_delete=django.db.models.deletion.PROTECT, related_name='products', to='product.ProductTemplate', verbose_name='模板'),
        ),
        migrations.AddField(
            model_name='lot',
            name='product',
            field=common.fields.ActiveLimitForeignKey(help_text='批次相关的产品', on_delete=django.db.models.deletion.PROTECT, to='product.Product', verbose_name='产品'),
        ),
        migrations.AddField(
            model_name='barcode',
            name='product',
            field=common.fields.ActiveLimitOneToOneField(help_text='条形码对应的产品', on_delete=django.db.models.deletion.CASCADE, to='product.Product', verbose_name='产品'),
        ),
        migrations.AddField(
            model_name='assemblytemplatesetting',
            name='product_category',
            field=common.fields.ActiveLimitForeignKey(help_text='模板明细的产品类型', on_delete=django.db.models.deletion.PROTECT, related_name='assembly_template_settings', to='product.ProductCategory', verbose_name='产品类型'),
        ),
        migrations.AddField(
            model_name='assemblytemplatesetting',
            name='uom',
            field=common.fields.ActiveLimitForeignKey(help_text='组装品产品类型的单位,所选产品必须为指定产品类型且为指定单位', on_delete=django.db.models.deletion.PROTECT, related_name='assembly_template_settings', to='product.UOM', verbose_name='单位'),
        ),
        migrations.AddField(
            model_name='assemblytemplate',
            name='product_category',
            field=models.ManyToManyField(help_text='组装品可包含的产品类别', related_name='assembly_templates', through='product.AssemblyTemplateSetting', to='product.ProductCategory', verbose_name='产品类别'),
        ),
        migrations.AddField(
            model_name='assemblysetting',
            name='product',
            field=common.fields.ActiveLimitForeignKey(help_text='组装品明细指定的产品', on_delete=django.db.models.deletion.PROTECT, related_name='assembly_settings', to='product.Product', verbose_name='产品'),
        ),
        migrations.AddField(
            model_name='assemblysetting',
            name='template_setting',
            field=models.ForeignKey(help_text='组装品明细相关的模板明细', on_delete=django.db.models.deletion.CASCADE, related_name='assembly_settings', to='product.AssemblyTemplateSetting', verbose_name='组装品模板明细'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='products',
            field=models.ManyToManyField(blank=True, help_text='所属产品', related_name='assemblies', through='product.AssemblySetting', to='product.Product', verbose_name='产品'),
        ),
        migrations.AddField(
            model_name='assembly',
            name='template',
            field=common.fields.ActiveLimitForeignKey(help_text='组装品所属的模板', on_delete=django.db.models.deletion.PROTECT, related_name='assemblies', to='product.AssemblyTemplateSetting', verbose_name='组装品模板'),
        ),
        migrations.AlterUniqueTogether(
            name='product',
            unique_together=set([('template', 'attributes_md5')]),
        ),
        migrations.AlterUniqueTogether(
            name='assemblytemplatesetting',
            unique_together=set([('assembly_template', 'product_category', 'uom')]),
        ),
        migrations.AlterUniqueTogether(
            name='assemblysetting',
            unique_together=set([('assembly', 'product')]),
        ),
    ]
